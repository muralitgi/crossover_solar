package com.crossover.techtrial.service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.crossover.techtrial.dto.DailyElectricity;
import com.crossover.techtrial.model.HourlyElectricity;
import com.crossover.techtrial.repository.HourlyElectricityRepository;

/**
 * HourlyElectricityServiceImpl will handle electricity generated by a Panel.
 *
 * @author Crossover
 *
 */

@Service
public class HourlyElectricityServiceImpl implements HourlyElectricityService {
	@Autowired
	HourlyElectricityRepository hourlyElectricityRepository;

	@Autowired
	EntityManager entityManager;

	public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
		return hourlyElectricityRepository.save(hourlyElectricity);
	}

	public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
		return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
	}

	@Override
  public List<DailyElectricity> getAllAverageElectricity(Long panelId) {
	  
	  List<DailyElectricity> dailyElectricities = new ArrayList<DailyElectricity>();
	  
  	Query query = entityManager.createNativeQuery("SELECT DATE_FORMAT(reading_at,'%m-%d-%Y') AS DATE ,SUM(generated_electricity), MAX(generated_electricity), MIN(generated_electricity), AVG(generated_electricity) AS average \n" + 
  			" FROM crosssolar.hourly_electricity" + 
  			" WHERE panel_id = ? AND CAST(reading_at AS DATE) < CURRENT_DATE" + 
  			" GROUP BY CAST(reading_at AS DATE)" + 
  			" ORDER BY CAST(reading_at AS DATE) ASC");
  	query.setParameter(1, panelId);
  	
  		@SuppressWarnings("unchecked")
		List<Object> resultList = query.getResultList();
  		for(int i=0;i<resultList.size();i++) {
  			Object obj[] = (Object[]) resultList.get(i);
  			DailyElectricity dailyElectricity = new DailyElectricity();
  			dailyElectricity.setDate(LocalDate.parse(obj[0].toString(),DateTimeFormatter.ofPattern("MM-dd-yyyy")));
  			dailyElectricity.setSum(new Long(obj[1].toString()));
  			dailyElectricity.setMax(new Long(obj[2].toString()));
  			dailyElectricity.setMin(new Long(obj[3].toString()));
  			dailyElectricity.setAverage(new Double(obj[4].toString()));
  			
  			dailyElectricities.add(dailyElectricity);
  		}
 	return dailyElectricities;
	}
}